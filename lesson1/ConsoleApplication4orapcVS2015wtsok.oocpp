// ConsoleApplication4orapc.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"


/* Result Sets Interface */
#ifndef SQL_CRSR
#  define SQL_CRSR
struct sql_cursor
{
	unsigned int curocn;
	void *ptr1;
	void *ptr2;
	unsigned int magic;
};
typedef struct sql_cursor sql_cursor;
typedef struct sql_cursor SQL_CURSOR;
#endif /* SQL_CRSR */

/* Thread Safety */
typedef void * sql_context;
typedef void * SQL_CONTEXT;

/* Object support */
struct sqltvn
{
	unsigned char *tvnvsn;
	unsigned short tvnvsnl;
	unsigned char *tvnnm;
	unsigned short tvnnml;
	unsigned char *tvnsnm;
	unsigned short tvnsnml;
};
typedef struct sqltvn sqltvn;

struct sqladts
{
	unsigned int adtvsn;
	unsigned short adtmode;
	unsigned short adtnum;
	sqltvn adttvn[1];
};
typedef struct sqladts sqladts;

static struct sqladts sqladt = {
	1,1,0,
};

/* Binding to PL/SQL Records */
struct sqltdss
{
	unsigned int tdsvsn;
	unsigned short tdsnum;
	unsigned char *tdsval[1];
};
typedef struct sqltdss sqltdss;
static struct sqltdss sqltds =
{
	1,
	0,
};

/* File name & Package Name */
struct sqlcxp
{
	unsigned short fillen;
	char  filnam[8];
};
static const struct sqlcxp sqlfpn =
{
	7,
	"test.pc"
};


static unsigned int sqlctx = 9995;


static struct sqlexd {
	unsigned int   sqlvsn;
	unsigned int   arrsiz;
	unsigned int   iters;
	unsigned int   offset;
	unsigned short selerr;
	unsigned short sqlety;
	unsigned int   occurs;
	const short *cud;
	unsigned char  *sqlest;
	const char  *stmt;
	sqladts *sqladtp;
	sqltdss *sqltdsp;
	void  **sqphsv;
	unsigned int   *sqphsl;
	int   *sqphss;
	void  **sqpind;
	int   *sqpins;
	unsigned int   *sqparm;
	unsigned int   **sqparc;
	unsigned short  *sqpadto;
	unsigned short  *sqptdso;
	unsigned int   sqlcmax;
	unsigned int   sqlcmin;
	unsigned int   sqlcincr;
	unsigned int   sqlctimeout;
	unsigned int   sqlcnowait;
	int   sqfoff;
	unsigned int   sqcmod;
	unsigned int   sqfmod;
	unsigned int   sqlpfmem;
	void  *sqhstv[4];
	unsigned int   sqhstl[4];
	int   sqhsts[4];
	void  *sqindv[4];
	int   sqinds[4];
	unsigned int   sqharm[4];
	unsigned int   *sqharc[4];
	unsigned short  sqadto[4];
	unsigned short  sqtdso[4];
} sqlstm = { 13,4 };

/* SQLLIB Prototypes */
extern "C" void sqlcxt(void **, unsigned int *, struct sqlexd *, const struct sqlcxp *);
extern void sqlcx2t(void **, unsigned int *,
struct sqlexd *, const struct sqlcxp *);
extern void sqlbuft(void **, char *);
extern void sqlgs2t(void **, char *);
extern void sqlorat(void **, unsigned int *, void *);

/* Forms Interface */
static const int IAPSUCC = 0;
static const int IAPFAIL = 1403;
static const int IAPFTL = 535;
extern void sqliem(unsigned char *, signed int *);

typedef struct { unsigned short len; unsigned char arr[1]; } VARCHAR;
typedef struct { unsigned short len; unsigned char arr[1]; } varchar;

/* cud (compilation unit data) array */
static const short sqlcud0[] =
{ 13,4130,852,0,0,
5,0,0,0,0,0,27,19,0,0,4,4,0,1,0,1,97,0,0,1,97,0,0,1,10,0,0,1,10,0,0,
36,0,0,2,0,0,30,25,0,0,0,0,0,1,0,
51,0,0,3,49,0,4,59,0,0,2,1,0,1,0,2,97,0,0,1,3,0,0,
};


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "sqlca.h"

//我最后用C++编译器编译此文件，不加“extern "C"”会报错
//如报错：无法解析的外部符号
extern "C" unsigned int sqlgls(char *, size_t *, size_t *);

//连接数据库
void connect()
{
	/* EXEC SQL BEGIN DECLARE SECTION; */

	char username[20], password[20];
	/* EXEC SQL END DECLARE SECTION; */


	strcpy_s(username, strlen("scott") + 1, "scott");
	strcpy_s(password, strlen("tiger") + 1, "tiger");
	/* EXEC SQL CONNECT : username IDENTIFIED BY : password; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 4;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.iters = (unsigned int)10;
		sqlstm.offset = (unsigned int)5;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlstm.sqhstv[0] = (void  *)username;
		sqlstm.sqhstl[0] = (unsigned int)20;
		sqlstm.sqhsts[0] = (int)20;
		sqlstm.sqindv[0] = (void  *)0;
		sqlstm.sqinds[0] = (int)0;
		sqlstm.sqharm[0] = (unsigned int)0;
		sqlstm.sqadto[0] = (unsigned short)0;
		sqlstm.sqtdso[0] = (unsigned short)0;
		sqlstm.sqhstv[1] = (void  *)password;
		sqlstm.sqhstl[1] = (unsigned int)20;
		sqlstm.sqhsts[1] = (int)20;
		sqlstm.sqindv[1] = (void  *)0;
		sqlstm.sqinds[1] = (int)0;
		sqlstm.sqharm[1] = (unsigned int)0;
		sqlstm.sqadto[1] = (unsigned short)0;
		sqlstm.sqtdso[1] = (unsigned short)0;
		sqlstm.sqphsv = sqlstm.sqhstv;
		sqlstm.sqphsl = sqlstm.sqhstl;
		sqlstm.sqphss = sqlstm.sqhsts;
		sqlstm.sqpind = sqlstm.sqindv;
		sqlstm.sqpins = sqlstm.sqinds;
		sqlstm.sqparm = sqlstm.sqharm;
		sqlstm.sqparc = sqlstm.sqharc;
		sqlstm.sqpadto = sqlstm.sqadto;
		sqlstm.sqptdso = sqlstm.sqtdso;
		sqlstm.sqlcmax = (unsigned int)100;
		sqlstm.sqlcmin = (unsigned int)2;
		sqlstm.sqlcincr = (unsigned int)1;
		sqlstm.sqlctimeout = (unsigned int)0;
		sqlstm.sqlcnowait = (unsigned int)0;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
	}


}

//断开连接，提交事务
void release()
{
	/* EXEC SQL COMMIT RELEASE; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 4;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.iters = (unsigned int)1;
		sqlstm.offset = (unsigned int)36;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
	}


}

//错误处理函数，当访问数据库出错时，会中止程序执行，打印错误信息
void sql_error()
{
	char stm[100];
	size_t sqlfc, stmlen = 100;
	unsigned int i;
	i = sqlgls(stm, &stmlen, &sqlfc);
	printf("出错语句为：%.*s\n", stmlen, stm);
	printf("%.*s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	system("PAUSE");
	exit(1);
}

int main()
{

	//主变量说明
	/* EXEC SQL BEGIN DECLARE SECTION; */

	char name[9];
	int sno;
	/* EXEC SQL END DECLARE SECTION; */


	//错误处理
	/* EXEC SQL WHENEVER NOT FOUND DO sql_error(); */

	/* EXEC SQL WHENEVER SQLERROR DO sql_error(); */

	/* EXEC SQL WHENEVER SQLWARNING DO sql_error(); */


	connect();

	sno = 2005;

	/* EXEC SQL SELECT SNAME INTO :name
	FROM STUDENT
	WHERE SNO=:sno; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 4;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.stmt = "select SNAME into :b0  from STUDENT where SNO=:b1";
		sqlstm.iters = (unsigned int)1;
		sqlstm.offset = (unsigned int)51;
		sqlstm.selerr = (unsigned short)1;
		sqlstm.sqlpfmem = (unsigned int)0;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlstm.sqhstv[0] = (void  *)name;
		sqlstm.sqhstl[0] = (unsigned int)9;
		sqlstm.sqhsts[0] = (int)0;
		sqlstm.sqindv[0] = (void  *)0;
		sqlstm.sqinds[0] = (int)0;
		sqlstm.sqharm[0] = (unsigned int)0;
		sqlstm.sqadto[0] = (unsigned short)0;
		sqlstm.sqtdso[0] = (unsigned short)0;
		sqlstm.sqhstv[1] = (void  *)&sno;
		sqlstm.sqhstl[1] = (unsigned int)sizeof(int);
		sqlstm.sqhsts[1] = (int)0;
		sqlstm.sqindv[1] = (void  *)0;
		sqlstm.sqinds[1] = (int)0;
		sqlstm.sqharm[1] = (unsigned int)0;
		sqlstm.sqadto[1] = (unsigned short)0;
		sqlstm.sqtdso[1] = (unsigned short)0;
		sqlstm.sqphsv = sqlstm.sqhstv;
		sqlstm.sqphsl = sqlstm.sqhstl;
		sqlstm.sqphss = sqlstm.sqhsts;
		sqlstm.sqpind = sqlstm.sqindv;
		sqlstm.sqpins = sqlstm.sqinds;
		sqlstm.sqparm = sqlstm.sqharm;
		sqlstm.sqparc = sqlstm.sqharc;
		sqlstm.sqpadto = sqlstm.sqadto;
		sqlstm.sqptdso = sqlstm.sqtdso;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
		if (sqlca.sqlcode == 1403) sql_error();
		if (sqlca.sqlcode < 0) sql_error();
		if (sqlca.sqlwarn[0] == 'W') sql_error();
	}



	printf("学号为2005的学生是%s\n", name);

	release();

	system("PAUSE");
	return 0;
}
