#include "stdafx.h"
/* Result Sets Interface */
#ifndef SQL_CRSR
#  define SQL_CRSR
struct sql_cursor
{
	unsigned int curocn;
	void *ptr1;
	void *ptr2;
	unsigned int magic;
};
typedef struct sql_cursor sql_cursor;
typedef struct sql_cursor SQL_CURSOR;
#endif /* SQL_CRSR */

/* Thread Safety */
typedef void * sql_context;
typedef void * SQL_CONTEXT;

/* Object support */
struct sqltvn
{
	unsigned char *tvnvsn;
	unsigned short tvnvsnl;
	unsigned char *tvnnm;
	unsigned short tvnnml;
	unsigned char *tvnsnm;
	unsigned short tvnsnml;
};
typedef struct sqltvn sqltvn;

struct sqladts
{
	unsigned int adtvsn;
	unsigned short adtmode;
	unsigned short adtnum;
	sqltvn adttvn[1];
};
typedef struct sqladts sqladts;

static struct sqladts sqladt = {
	1,1,0,
};

/* Binding to PL/SQL Records */
struct sqltdss
{
	unsigned int tdsvsn;
	unsigned short tdsnum;
	unsigned char *tdsval[1];
};
typedef struct sqltdss sqltdss;
static struct sqltdss sqltds =
{
	1,
	0,
};

/* File name & Package Name */
struct sqlcxp
{
	unsigned short fillen;
	char  filnam[8];
};
static const struct sqlcxp sqlfpn =
{
	7,
	"test.pc"
};


static unsigned int sqlctx = 9995;


static struct sqlexd {
	unsigned int   sqlvsn;
	unsigned int   arrsiz;
	unsigned int   iters;
	unsigned int   offset;
	unsigned short selerr;
	unsigned short sqlety;
	unsigned int   occurs;
	const short *cud;
	unsigned char  *sqlest;
	const char  *stmt;
	sqladts *sqladtp;
	sqltdss *sqltdsp;
	void  **sqphsv;
	unsigned int   *sqphsl;
	int   *sqphss;
	void  **sqpind;
	int   *sqpins;
	unsigned int   *sqparm;
	unsigned int   **sqparc;
	unsigned short  *sqpadto;
	unsigned short  *sqptdso;
	unsigned int   sqlcmax;
	unsigned int   sqlcmin;
	unsigned int   sqlcincr;
	unsigned int   sqlctimeout;
	unsigned int   sqlcnowait;
	int   sqfoff;
	unsigned int   sqcmod;
	unsigned int   sqfmod;
	unsigned int   sqlpfmem;
	void  *sqhstv[7];
	unsigned int   sqhstl[7];
	int   sqhsts[7];
	void  *sqindv[7];
	int   sqinds[7];
	unsigned int   sqharm[7];
	unsigned int   *sqharc[7];
	unsigned short  sqadto[7];
	unsigned short  sqtdso[7];
} sqlstm = { 13,7 };

// Prototypes
extern "C" void sqlcxt(void **, unsigned int *, struct sqlexd *, const struct sqlcxp *);
extern "C" {
	void sqlcx2t(void **, unsigned int *, struct sqlexd *, const struct sqlcxp *);
	void sqlbuft(void **, char *);
	void sqlgs2t(void **, char *);
	void sqlorat(void **, unsigned int *, void *);
}

// Forms Interface
static const int IAPSUCC = 0;
static const int IAPFAIL = 1403;
static const int IAPFTL = 535;
extern "C" { void sqliem(unsigned char *, signed int *); }

typedef struct { unsigned short len; unsigned char arr[1]; } VARCHAR;
typedef struct { unsigned short len; unsigned char arr[1]; } varchar;

/* cud (compilation unit data) array */
static const short sqlcud0[] =
{ 13,4130,852,0,0,
5,0,0,1,0,0,32,45,0,0,0,0,0,1,0,
20,0,0,0,0,0,27,53,0,0,4,4,0,1,0,1,97,0,0,1,10,0,0,1,10,0,0,1,10,0,0,
51,0,0,3,133,0,3,71,0,0,7,7,0,1,0,1,3,0,0,1,97,0,0,1,97,0,0,1,97,0,0,1,97,0,0,
1,3,0,0,1,97,0,0,
94,0,0,4,0,0,30,77,0,0,0,0,0,1,0,
};


//This file was tested by wts on CENTOS 7.9, eclipse 202309, oracle 19.3: can Insert one item into the table!!
//DELETE FROM "C##DRUGDBUSER".DRUGCOURSEUSER WHERE STD_ID=90 ;


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "sqlca.h"  // this is copied from /opt/app/oracle/product/19.3.000/db_home/precomp/public

/* EXEC SQL INCLUDE sqlca;
*/
/*
* $Header: precomp/public/sqlca.h /osds/1 2011/08/02 23:12:16 pnayak Exp $ sqlca.h
*/

/* Copyright (c) 1985, 2003, Oracle Corporation.  All rights reserved.  */

/*
NAME
SQLCA : SQL Communications Area.
FUNCTION
Contains no code. Oracle fills in the SQLCA with status info
during the execution of a SQL stmt.
NOTES
**************************************************************
***                                                        ***
*** This file is SOSD.  Porters must change the data types ***
*** appropriately on their platform.  See notes/pcport.doc ***
*** for more information.                                  ***
***                                                        ***
**************************************************************

If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
will be defined to have this storage class. For example:

#define SQLCA_STORAGE_CLASS extern

will define the SQLCA as an extern.

If the symbol SQLCA_INIT is defined, then the SQLCA will be
statically initialized. Although this is not necessary in order
to use the SQLCA, it is a good pgming practice not to have
unitialized variables. However, some C compilers/OS's don't
allow automatic variables to be init'd in this manner. Therefore,
if you are INCLUDE'ing the SQLCA in a place where it would be
an automatic AND your C compiler/OS doesn't allow this style
of initialization, then SQLCA_INIT should be left undefined --
all others can define SQLCA_INIT if they wish.

If the symbol SQLCA_NONE is defined, then the SQLCA variable will
not be defined at all.  The symbol SQLCA_NONE should not be defined
in source modules that have embedded SQL.  However, source modules
that have no embedded SQL, but need to manipulate a sqlca struct
passed in as a parameter, can set the SQLCA_NONE symbol to avoid
creation of an extraneous sqlca variable.

MODIFIED
lvbcheng   07/31/98 -  long to int
jbasu      12/12/94 -  Bug 217878: note this is an SOSD file
losborne   08/11/92 -  No sqlca var if SQLCA_NONE macro set
Clare      12/06/84 - Ch SQLCA to not be an extern.
Clare      10/21/85 - Add initialization.
Bradbury   01/05/86 - Only initialize when SQLCA_INIT set
Clare      06/12/86 - Add SQLCA_STORAGE_CLASS option.
*/

#ifndef SQLCA
#define SQLCA 1

struct   sqlca
{
	/* ub1 */ char    sqlcaid[8];
	/* b4  */ int     sqlabc;
	/* b4  */ int     sqlcode;
	struct
	{
		/* ub2 */ unsigned short sqlerrml;
		/* ub1 */ char           sqlerrmc[70];
	} sqlerrm;
	/* ub1 */ char    sqlerrp[8];
	/* b4  */ int     sqlerrd[6];
	/* ub1 */ char    sqlwarn[8];
	/* ub1 */ char    sqlext[8];
};

#ifndef SQLCA_NONE
#ifdef   SQLCA_STORAGE_CLASS
SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
struct sqlca sqlca
#endif

#ifdef  SQLCA_INIT
	= {
		{ 'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' ' },
		sizeof(struct sqlca),
	0,
	{ 0,{ 0 } },
	{ 'N', 'O', 'T', ' ', 'S', 'E', 'T', ' ' },
	{ 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0 }
}
#endif
;
#endif

#endif

/* end SQLCA */

// 拓展 sqlgls 函数作用域
//用Eclipse 202309C++编译此文件，不加"extern "C""会报错
//如报错：无法解析的外部符号
extern "C" unsigned int sqlgls(char *, size_t *, size_t *);
/* EXEC SQL BEGIN DECLARE SECTION; */

char *serversid = "c##drugdbuser/wtsgyh1972@drugdb";
// 宿主变量，c与sql的一种数据类型的桥梁   ,,,,, ,
int STD_ID;
char STD_NAME[100];
char STD_NUM[50];
char STD_MAJOR[50];
char STD_PASSWORD[200];
int STD_RECORDS;
char ISVIP[200];
// loc 的指示变量，唯一的作用就是用来处理null值
short isvip_ind;
/* EXEC SQL END DECLARE SECTION; */


void sqlerr() {
	// 临时变量
	char stm[120];
	size_t sqlfc, stmlen = 120;
	unsigned int ret = 0;
	// 让下一次出现错误时不再跳转到函数中，而是继续下一步（CONTINUE）
	// 防止处理函数中有执行错误再次调用处理函数而导致的递归
	/* EXEC SQL WHENEVER SQLERROR CONTINUE; */

	// Here 获取错误的sql语句
	ret = sqlgls(stm, &stmlen, &sqlfc);
	// c语言使用printf可以用 %.*s 的方式来打印两个衔接的变量
	printf("%.*s\n", stmlen, stm);
	// sqlca.sqlerrm.sqlerrml 为错误编号长度
	// sqlca.sqlerrm.sqlerrmc 为错误内容
	printf("%.*s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	// 执行回滚并释放连接
	/* EXEC SQL ROLLBACK WORK RELEASE; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 0;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.iters = (unsigned int)1;
		sqlstm.offset = (unsigned int)5;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
	}


	exit(1);
}
int main(int argc, char* argv[]) {
	int ret = 0;
	// 开启错误处理机制，指定错误处理函数为 sqlerr
	/* EXEC SQL WHENEVER SQLERROR DO sqlerr(); */

	// 连接 oracle 服务器
	/* EXEC SQL CONNECT :serversid; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 4;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.iters = (unsigned int)10;
		sqlstm.offset = (unsigned int)20;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlstm.sqhstv[0] = (void  *)serversid;
		sqlstm.sqhstl[0] = (unsigned int)0;
		sqlstm.sqhsts[0] = (int)0;
		sqlstm.sqindv[0] = (void  *)0;
		sqlstm.sqinds[0] = (int)0;
		sqlstm.sqharm[0] = (unsigned int)0;
		sqlstm.sqadto[0] = (unsigned short)0;
		sqlstm.sqtdso[0] = (unsigned short)0;
		sqlstm.sqphsv = sqlstm.sqhstv;
		sqlstm.sqphsl = sqlstm.sqhstl;
		sqlstm.sqphss = sqlstm.sqhsts;
		sqlstm.sqpind = sqlstm.sqindv;
		sqlstm.sqpins = sqlstm.sqinds;
		sqlstm.sqparm = sqlstm.sqharm;
		sqlstm.sqparc = sqlstm.sqharc;
		sqlstm.sqpadto = sqlstm.sqadto;
		sqlstm.sqptdso = sqlstm.sqtdso;
		sqlstm.sqlcmax = (unsigned int)100;
		sqlstm.sqlcmin = (unsigned int)2;
		sqlstm.sqlcincr = (unsigned int)1;
		sqlstm.sqlctimeout = (unsigned int)0;
		sqlstm.sqlcnowait = (unsigned int)0;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
		if (sqlca.sqlcode < 0) sqlerr();
	}


	if (sqlca.sqlcode != 0) {
		ret = sqlca.sqlcode;
		printf("connect oracle error… code = %d\n", ret);
		return ret;
	}
	// 插入一个已经存在的 deptno ，会导致出错
	STD_ID = 90;
	strcpy_s(STD_NAME, "dengjia");//U202011069
	strcpy_s(STD_NUM, "U202111069");
	strcpy_s(STD_MAJOR, "dengjia");
	strcpy_s(STD_PASSWORD, "dengjia");
	STD_RECORDS = 1000;
	strcpy_s(ISVIP, "VIP");
	// 如果希望将 loc 插入时置为 null，那么就把指示变量 isvip_ind 设置为 -1
	isvip_ind = -1;
	// 插入数据时，注意指示变量的用法  STD_ID,STD_NAME,STD_NUM,STD_MAJOR,STD_PASSWORD,STD_RECORDS,ISVIP
	//EXEC SQL insert into DRUGCOURSEUSER(deptno, dname, loc) values(:deptno, :dname, :loc:isvip_ind);
	/* EXEC SQL insert into DRUGCOURSEUSER(STD_ID,STD_NAME,STD_NUM,STD_MAJOR,STD_PASSWORD,STD_RECORDS,ISVIP) values(:STD_ID, :STD_NAME, :STD_NUM, :STD_MAJOR, :STD_PASSWORD, :STD_RECORDS, :ISVIP:isvip_ind); */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 7;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.stmt = "insert into DRUGCOURSEUSER (STD_ID,STD_NAME,STD_NUM,STD_MAJO\
R,STD_PASSWORD,STD_RECORDS,ISVIP) values (:b0,:b1,:b2,:b3,:b4,:b5,:b6:b7)";
		sqlstm.iters = (unsigned int)1;
		sqlstm.offset = (unsigned int)51;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlstm.sqhstv[0] = (void  *)&STD_ID;
		sqlstm.sqhstl[0] = (unsigned int)sizeof(int);
		sqlstm.sqhsts[0] = (int)0;
		sqlstm.sqindv[0] = (void  *)0;
		sqlstm.sqinds[0] = (int)0;
		sqlstm.sqharm[0] = (unsigned int)0;
		sqlstm.sqadto[0] = (unsigned short)0;
		sqlstm.sqtdso[0] = (unsigned short)0;
		sqlstm.sqhstv[1] = (void  *)STD_NAME;
		sqlstm.sqhstl[1] = (unsigned int)100;
		sqlstm.sqhsts[1] = (int)0;
		sqlstm.sqindv[1] = (void  *)0;
		sqlstm.sqinds[1] = (int)0;
		sqlstm.sqharm[1] = (unsigned int)0;
		sqlstm.sqadto[1] = (unsigned short)0;
		sqlstm.sqtdso[1] = (unsigned short)0;
		sqlstm.sqhstv[2] = (void  *)STD_NUM;
		sqlstm.sqhstl[2] = (unsigned int)50;
		sqlstm.sqhsts[2] = (int)0;
		sqlstm.sqindv[2] = (void  *)0;
		sqlstm.sqinds[2] = (int)0;
		sqlstm.sqharm[2] = (unsigned int)0;
		sqlstm.sqadto[2] = (unsigned short)0;
		sqlstm.sqtdso[2] = (unsigned short)0;
		sqlstm.sqhstv[3] = (void  *)STD_MAJOR;
		sqlstm.sqhstl[3] = (unsigned int)50;
		sqlstm.sqhsts[3] = (int)0;
		sqlstm.sqindv[3] = (void  *)0;
		sqlstm.sqinds[3] = (int)0;
		sqlstm.sqharm[3] = (unsigned int)0;
		sqlstm.sqadto[3] = (unsigned short)0;
		sqlstm.sqtdso[3] = (unsigned short)0;
		sqlstm.sqhstv[4] = (void  *)STD_PASSWORD;
		sqlstm.sqhstl[4] = (unsigned int)200;
		sqlstm.sqhsts[4] = (int)0;
		sqlstm.sqindv[4] = (void  *)0;
		sqlstm.sqinds[4] = (int)0;
		sqlstm.sqharm[4] = (unsigned int)0;
		sqlstm.sqadto[4] = (unsigned short)0;
		sqlstm.sqtdso[4] = (unsigned short)0;
		sqlstm.sqhstv[5] = (void  *)&STD_RECORDS;
		sqlstm.sqhstl[5] = (unsigned int)sizeof(int);
		sqlstm.sqhsts[5] = (int)0;
		sqlstm.sqindv[5] = (void  *)0;
		sqlstm.sqinds[5] = (int)0;
		sqlstm.sqharm[5] = (unsigned int)0;
		sqlstm.sqadto[5] = (unsigned short)0;
		sqlstm.sqtdso[5] = (unsigned short)0;
		sqlstm.sqhstv[6] = (void  *)ISVIP;
		sqlstm.sqhstl[6] = (unsigned int)200;
		sqlstm.sqhsts[6] = (int)0;
		sqlstm.sqindv[6] = (void  *)&isvip_ind;
		sqlstm.sqinds[6] = (int)0;
		sqlstm.sqharm[6] = (unsigned int)0;
		sqlstm.sqadto[6] = (unsigned short)0;
		sqlstm.sqtdso[6] = (unsigned short)0;
		sqlstm.sqphsv = sqlstm.sqhstv;
		sqlstm.sqphsl = sqlstm.sqhstl;
		sqlstm.sqphss = sqlstm.sqhsts;
		sqlstm.sqpind = sqlstm.sqindv;
		sqlstm.sqpins = sqlstm.sqinds;
		sqlstm.sqparm = sqlstm.sqharm;
		sqlstm.sqparc = sqlstm.sqharc;
		sqlstm.sqpadto = sqlstm.sqadto;
		sqlstm.sqptdso = sqlstm.sqtdso;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
		if (sqlca.sqlcode < 0) sqlerr();
	}


	if (sqlca.sqlcode != 0) {
		ret = sqlca.sqlcode;
		printf("insert into error… code = %d\n", ret);
		return ret;
	}
	/* EXEC SQL commit release; */

	{
		struct sqlexd sqlstm;
		sqlstm.sqlvsn = 13;
		sqlstm.arrsiz = 7;
		sqlstm.sqladtp = &sqladt;
		sqlstm.sqltdsp = &sqltds;
		sqlstm.iters = (unsigned int)1;
		sqlstm.offset = (unsigned int)94;
		sqlstm.cud = sqlcud0;
		sqlstm.sqlest = (unsigned char  *)&sqlca;
		sqlstm.sqlety = (unsigned short)4352;
		sqlstm.occurs = (unsigned int)0;
		sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
		if (sqlca.sqlcode < 0) sqlerr();
	}


	return 0;
}